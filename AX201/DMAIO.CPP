#define DMA0_BASE    0x00  /* DMA 0 베이스 어드레스 */
#define DMA1_BASE    0xC0  /* DMA 1 베이스 어드레스 */

#define DMA_STATUS   0x08  /* DMA 상태 어드레스 */
#define DMA_COMMAND  0x08  /* DMA 명령 어드레스 */
#define DMA_MASK     0x0A  /* DMA 요구 MASK 어드레스 */
#define DMA_MODE     0x0B  /* DMA 전송 모드 어드레스 */
#define DMA_FF_CLR   0x0C  /* DMA 내부 (High/low Byte) Flip-Flop Clear 어드레스 */

#define DMA_CHANNEL  0x00  /* DMA 채널 메모리 어드레스 */
#define DMA_RUN_BYTE 0x01  /* DMA 채널 메모리 카운터 어드레스 */

#define CMD_DMA_MASK_SET  0x04 /* DMA DREQ MASK SET 명령어 */
#define CMD_DMA_MASK_CLR  0x00 /* DMA DREQ MASK CLEAR 명령어 */
#define CMD_DMA_SINGLE_WRITE     0x44 /* 주변장치 -> Memory 간 전송 명령어 */
#define CMD_DMA_SINGLE_READ      0x48 /* Memory -> 주변장치간 전송 명령어 */

/* AT 24 비트 절대  어드레스중 상위 8 비트 저장 I/O 어드레스 */
static unsigned char DMA_ChannelPage[4] = { 0x87,0x83,0x81,0x82 };

int DMA_Run(unsigned int aptr,unsigned short int length,unsigned char channel,
	unsigned char dir)
{
	unsigned char page,low16Add,high16Add;
	unsigned int  DMAPort,cmd;
	int avail;
    if( length == 0 ) return -1;    /*  DMA 전송량을 검사  */
    if( channel > 3 ) return -1;    /*  채널 번호를 검사   */

	page = (unsigned char) (aptr >> 16);
	low16Add  = (unsigned char) (aptr & 0xFF);
	high16Add = (unsigned char) ((aptr >> 8) & 0xFF);
	avail = (unsigned int) (0x10000 - (aptr & 0xFFFF));
	if( avail < length ) return -2;
    if( dir ) cmd = CMD_DMA_SINGLE_READ;    /*  읽기    */
    else cmd = CMD_DMA_SINGLE_WRITE;        /*  또는 쓰기   */
	cmd += channel;
	DMAPort = channel << 1;
	outp( DMA_ChannelPage[channel], page );	/* 채널 Page Address Set */
	outp( DMA_FF_CLR, 0 );	/* DMA 내부 상/하위 선택 Flip-Flop Reset */
	outp( DMAPort, low16Add );		/* DMA Base Low  8 Bit Address Set */
	outp( DMAPort, high16Add );		/* DMA Base High 8 Bit Address Set */
	DMAPort++;
	outp( DMAPort, length & 0xFF );	/* DMA Base Low  8 Bit Counter Set */
	outp( DMAPort, length >> 8 );	/* DMA Base High 8 Bit Counter Set */
	outp( DMA_MODE, cmd );			/* DMA Mode 를 Single Mode 로 세팅 */
										/* Address 증가 방향 */
	outp( DMA_MASK, CMD_DMA_MASK_CLR + channel );
										/* DMA Request Enable */
	return 0;
}

int DMA_DisableDREQ(unsigned char channel)
{
	if( channel > 3 ) return -1;
	outp( DMA_MASK, CMD_DMA_MASK_SET + channel );
	return 0;
}

int DMA_EnableDREQ(unsigned char channel)
{
	if( channel > 3 ) return -1;
	outp( DMA_MASK, CMD_DMA_MASK_CLR + channel );
	return 0;
}

unsigned int DMA_GetDMACounter(unsigned char channel)
{
	unsigned short int low,high,DMAPort;
	if( channel > 3 ) return -1;
	outp( DMA_FF_CLR, 0 );		/* DMA 내부 상/하위 선택 Flip-Flop Reset */
	DMAPort = (channel << 1) + 1;	/* I/O 어드레스 계산 */
	low  = inp( DMAPort );		/* DMA 카운터 하위 8 비트 */
	high = inp( DMAPort );		/* DMA 카운터 상위 8 비트 */
	return (low | (high << 8));
}
